from pathlib import Path

import toml

BASE_DIR = Path(__file__).parent.parent

# Package name mappings
package_mappings = {
    'aspose-words': 'aspose',
    'opencv-python': 'cv2',
    'pillow': 'PIL',
    'pymupdf': 'fitz',
}

# Read pyproject.toml file
pyproject_path = BASE_DIR / 'pyproject.toml'
# Define the import file path
import_script_path = BASE_DIR / './opencf/import_script.py'

if not pyproject_path.exists():
    print("pyproject.toml file not found.")
    exit()

if not import_script_path.parent.exists():
    print("import_script_path parent folder not found.")
    exit()

with pyproject_path.open('r') as file:
    pyproject_toml = toml.load(file)

# Get extras sections
extras = pyproject_toml.get('tool', {}).get('poetry', {}).get('extras', {})

# Generate import statements
import_statements = []
for extra, packages in extras.items():
    if not isinstance(packages, list): continue
    package_names = ', '.join(map(lambda x: f"'{package_mappings.get(x, x)}'", packages))
    import_statements.append(f'generalimport({package_names}, message="Install with pip install opencf[{extra}]")')

# Write import statements to the import file
with import_script_path.open('w') as file:
    file.write('# Autogenerated import script\n')
    file.write('# This script is generated based on dependencies listed in pyproject.toml\n\n')
    file.write('from generalimport import generalimport\n\n')
    file.write('\n'.join(import_statements))
    file.write('\n')

print(f"Import script generated successfully to {import_script_path}.")
